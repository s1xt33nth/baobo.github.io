<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Java 项目部署实践</title>
    <url>/1026407118/</url>
    <content><![CDATA[<p>系统基于 CentOS7。</p>
<h1 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h1><h2 id="安装-JDK"><a href="#安装-JDK" class="headerlink" title="安装 JDK"></a>安装 JDK</h2><p>查看 yum 库中的 JDK 安装包 ：<code>yum -y list java*</code></p>
<p>安装需要的 JDK 版本的所有程序：<code>yum -y install java-1.8.0-openjdk*</code></p>
<p>参考链接：<a href="https://blog.csdn.net/qq_32786873/article/details/78749384">在CentOS7.4中安装jdk的几种方法及配置环境变量_勿忘初心的博客-CSDN博客_centos配置java环境变量</a></p>
<h2 id="安装-Maven"><a href="#安装-Maven" class="headerlink" title="安装 Maven"></a>安装 Maven</h2><p>安装命令：<code>yum install -y apache-maven</code></p>
<p>修改镜像：<code>vi /usr/share/apache-maven/conf/settings.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>&lt;http://maven.aliyun.com/nexus/content/groups/public/&gt;<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>参考链接：<a href="https://www.jianshu.com/p/dfccd5de6032">CentOS上用yum安装Maven</a></p>
<h2 id="安装-Docker"><a href="#安装-Docker" class="headerlink" title="安装 Docker"></a>安装 Docker</h2><p>安装命令：<code>yum -y install docker-ce</code></p>
<p>启动命令：<code>systemctl start docker</code></p>
<p>参考链接：<a href="https://cloud.tencent.com/developer/article/1701451">centos7安装Docker详细步骤（无坑版教程）</a></p>
<p>修改加速地址：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-<span class="string">&#x27;EOF&#x27;</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;&lt;https://xxx.mirror.aliyuncs.com&gt;&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>

<p>参考链接：<a href="https://help.aliyun.com/document_detail/60750.html#title-s0s-jjs-26k">官方镜像加速</a></p>
<h1 id="项目部署"><a href="#项目部署" class="headerlink" title="项目部署"></a>项目部署</h1><h2 id="Jar-包方式"><a href="#Jar-包方式" class="headerlink" title="Jar 包方式"></a>Jar 包方式</h2><p>使用 IDEA 内置 deployment，上传 jar 包到服务器。</p>
<h2 id="Docker-方式"><a href="#Docker-方式" class="headerlink" title="Docker 方式"></a>Docker 方式</h2><p>在 /usr/lib/systemd/system/docker.service，配置远程访问。</p>
<p>主要是在[Service]这个部分的 ExecStart 中，加上下面两个参数：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">-H</span> <span class="string">tcp://0.0.0.0:2375</span> <span class="string">-H</span> <span class="string">unix://var/run/docker.sock</span></span><br></pre></td></tr></table></figure>

<p>然后重启：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">systemctl</span> <span class="string">daemon-reload</span></span><br><span class="line"><span class="string">systemctl</span> <span class="string">restart</span> <span class="string">docker</span></span><br></pre></td></tr></table></figure>

<p>在 IDEA 中，连接 Docker：<code>tcp://ip:2375</code>。</p>
<p>参考链接：</p>
<p><a href="https://cloud.tencent.com/developer/article/1683689">Docker开启Remote API 访问 2375端口</a></p>
<p><a href="https://blog.csdn.net/weixin_42687829/article/details/104249583">用idea部署springboot项目到docker_今日相乐，皆当喜欢的博客-CSDN博客_idea部署项目到docker</a></p>
<h1 id="运行命令"><a href="#运行命令" class="headerlink" title="运行命令"></a>运行命令</h1><p>后台运行：<code>nohup java -jar xxx.jar &gt;temp.txt &amp;</code></p>
<p>查看运行的任务：<code>jobs</code></p>
<p>如果想将某个作业调回前台控制，只需要 <code>fg + 编号</code> 即可。</p>
<p>查看某端口占用的线程的pid：<code>netstat -nlp |grep :9181</code></p>
<p>查看当前运行的jar包程序进程号：<code>ps -ef|grep xxx.jar</code> 或者 <code>ps -aux | grep java</code></p>
<p>关闭进程：<code>kill -s 9 24204</code></p>
<p>参考链接：</p>
<p><a href="https://cloud.tencent.com/developer/article/1722069">Linux中jar包启动和jar包后台运行的实现方式</a></p>
<p><a href="https://lullabychen.github.io/2019/10/09/Java-IDEA%E6%89%93jar%E5%8C%85-%E9%83%A8%E7%BD%B2%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BF%87%E7%A8%8B%E5%85%A8%E8%AE%B0%E5%BD%95/">Java：idea打包jar包&amp;部署到服务器过程全记录</a></p>
<h1 id="项目架构"><a href="#项目架构" class="headerlink" title="项目架构"></a>项目架构</h1><h2 id="搭建项目"><a href="#搭建项目" class="headerlink" title="搭建项目"></a>搭建项目</h2><ol>
<li>在代码仓库新建项目，clone 到本地。</li>
<li>新建 Maven 工程，编辑 pom.xml 文件。（或使用 <a href="http://start.spring.io/">start.spring.io</a>、IDEA 内置 Initializr）groupId 定义当前 Maven项目隶属的实际项目，artifactId 建议使用实际项目作为前缀。</li>
<li>新建 Modules。</li>
</ol>
<p>参考链接：<a href="https://juejin.cn/post/6906453629381804046">Spring Data JDBC入门使用Demo - 掘金</a></p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>实战</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring 动态绑定</title>
    <url>/1655783544/</url>
    <content><![CDATA[<h1 id="需求场景"><a href="#需求场景" class="headerlink" title="需求场景"></a>需求场景</h1><p>在系统运行时，根据不同的场景需要多个类实例。比如一个 Redis 类，需要传入不同的 Category（可以理解为 Key 前缀），从而实现多个 Redis 子类。</p>
<h1 id="步骤一、自定义注解"><a href="#步骤一、自定义注解" class="headerlink" title="步骤一、自定义注解"></a>步骤一、自定义注解</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(ElementType.FIELD)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> CacheService &#123;</span><br><span class="line">    <span class="function">String <span class="title">category</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以设置为 <code>String value() default &quot;&quot;;</code> ，使用时可以隐藏字段名。</p>
<h1 id="步骤二、扫描属性上的注解"><a href="#步骤二、扫描属性上的注解" class="headerlink" title="步骤二、扫描属性上的注解"></a>步骤二、扫描属性上的注解</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Field[] fields = object.getClass().getDeclaredFields();</span><br><span class="line">CacheService annotation = field.getAnnotation(CacheService.class);</span><br></pre></td></tr></table></figure>

<h1 id="步骤三、向容器注入-Bean"><a href="#步骤三、向容器注入-Bean" class="headerlink" title="步骤三、向容器注入 Bean"></a>步骤三、向容器注入 Bean</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取 context</span></span><br><span class="line">ConfigurableApplicationContext context = (ConfigurableApplicationContext) applicationContext;</span><br><span class="line"><span class="comment">// 获取 BeanFactory</span></span><br><span class="line">DefaultListableBeanFactory beanFactory = (DefaultListableBeanFactory) context.getBeanFactory();</span><br><span class="line"><span class="comment">// 创建 bean 信息</span></span><br><span class="line">BeanDefinitionBuilder beanDefinitionBuilder = BeanDefinitionBuilder.genericBeanDefinition(RedisService.class);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置字段</span></span><br><span class="line">beanDefinitionBuilder.addPropertyValue(<span class="string">&quot;category&quot;</span>, category);</span><br><span class="line">beanFactory.registerBeanDefinition(field.getName(), beanDefinitionBuilder.getBeanDefinition());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取动态注册的 bean</span></span><br><span class="line">RedisService bean = (RedisService) applicationContext.getBean(field.getName());</span><br><span class="line">field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">field.set(object, bean);</span><br></pre></td></tr></table></figure>

<h1 id="步骤四、使用"><a href="#步骤四、使用" class="headerlink" title="步骤四、使用"></a>步骤四、使用</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@CacheService(category = Constants.ORDER_DRIVER)</span></span><br><span class="line"><span class="keyword">private</span> RedisService orderDriverCache;</span><br></pre></td></tr></table></figure>

<h1 id="示意图"><a href="#示意图" class="headerlink" title="示意图"></a>示意图</h1><p><img src="../images/DynamicBinding.png"></p>
<h1 id="全部示例代码"><a href="#全部示例代码" class="headerlink" title="全部示例代码"></a>全部示例代码</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// RedisService.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource(name = &quot;redisNioClient&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> SquirrelClient redisNioClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource(name = &quot;redisClient&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> RedisStoreClient redisClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Setter</span></span><br><span class="line">    <span class="keyword">private</span> String category;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// CacheService.java</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(ElementType.FIELD)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> CacheService &#123;</span><br><span class="line">    <span class="function">String <span class="title">category</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// CacheServiceAnnotation.java</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CacheServiceAnnotation</span> <span class="keyword">implements</span> <span class="title">ApplicationListener</span>&lt;<span class="title">ContextRefreshedEvent</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onApplicationEvent</span><span class="params">(ContextRefreshedEvent event)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> ApplicationContext applicationContext = event.getApplicationContext();</span><br><span class="line"></span><br><span class="line">        Arrays.stream(applicationContext.getBeanDefinitionNames())</span><br><span class="line">                .map(applicationContext::getBean)</span><br><span class="line">                .forEach(object -&gt; &#123;</span><br><span class="line">                    <span class="keyword">final</span> Field[] fields = object.getClass().getDeclaredFields();</span><br><span class="line">                    Arrays.stream(fields)</span><br><span class="line">                            .filter(field -&gt; field.isAnnotationPresent(CacheService.class))</span><br><span class="line">                            .forEach(field -&gt; &#123;</span><br><span class="line">                                <span class="keyword">final</span> RedisService bean = getRedisService(applicationContext, field);</span><br><span class="line">                                <span class="keyword">try</span> &#123;</span><br><span class="line">                                    field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                                    field.set(object, bean);</span><br><span class="line">                                    log.info(<span class="string">&quot;set field success, object: &#123;&#125;, bean: &#123;&#125;&quot;</span>, object.getClass().getSimpleName(), field.getName());</span><br><span class="line">                                &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">                                    log.error(<span class="string">&quot;set field fail, object: &#123;&#125;, bean: &#123;&#125;&quot;</span>, object.getClass().getSimpleName(), field.getName(), e);</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;);</span><br><span class="line">                &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> RedisService <span class="title">getRedisService</span><span class="params">(ApplicationContext applicationContext, Field field)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (applicationContext.containsBeanDefinition(field.getName())) &#123;</span><br><span class="line">            <span class="keyword">return</span> (RedisService) applicationContext.getBean(field.getName());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> CacheService annotation = field.getAnnotation(CacheService.class);</span><br><span class="line">        <span class="keyword">final</span> String category = annotation.category();</span><br><span class="line"></span><br><span class="line">        ConfigurableApplicationContext context = (ConfigurableApplicationContext) applicationContext;</span><br><span class="line">        DefaultListableBeanFactory beanFactory = (DefaultListableBeanFactory) context.getBeanFactory();</span><br><span class="line">        BeanDefinitionBuilder beanDefinitionBuilder = BeanDefinitionBuilder.genericBeanDefinition(RedisService.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置字段</span></span><br><span class="line">        beanDefinitionBuilder.addPropertyValue(<span class="string">&quot;category&quot;</span>, category);</span><br><span class="line">        beanFactory.registerBeanDefinition(field.getName(), beanDefinitionBuilder.getBeanDefinition());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取动态注册的 bean</span></span><br><span class="line">        RedisService bean = (RedisService) applicationContext.getBean(field.getName());</span><br><span class="line">        log.info(<span class="string">&quot;register Bean success, bean: &#123;&#125;&quot;</span>, field.getName());</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>参考资料：</p>
<p><a href="https://blog.csdn.net/u011983531/article/details/70941123">Java获取类、方法、属性上的注解_根号三-CSDN博客_java 获取属性上的注解</a></p>
<p><a href="https://www.cnblogs.com/east7/p/14390816.html">使用自定义注解动态绑定多实现类实例</a></p>
<p><a href="https://segmentfault.com/a/1190000024522038">SpringBoot动态注入及操作Bean</a></p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>动态绑定</tag>
      </tags>
  </entry>
  <entry>
    <title>后端工程师学习路径</title>
    <url>/3201199714/</url>
    <content><![CDATA[<h1 id="整体脉络"><a href="#整体脉络" class="headerlink" title="整体脉络"></a>整体脉络</h1><p> 操作系统 → 计算机网络 → 数据结构与算法 → 编程语言 → 数据库 → 框架 → 中间件 → 架构思维</p>
<h1 id="详细资料"><a href="#详细资料" class="headerlink" title="详细资料"></a>详细资料</h1><table>
<thead>
<tr>
<th>技能</th>
<th>相关资料</th>
</tr>
</thead>
<tbody><tr>
<td>计算机组成原理</td>
<td>计算机科学速成课、《计算机是怎样跑起来的》、《程序是怎样跑起来的》、《编码》、掘金《计算机是怎样运行的》</td>
</tr>
<tr>
<td>操作系统</td>
<td>《操作系统导论》、《现代操作系统》、《深入理解计算机系统》、MIT 608、极客时间《操作系统45讲》</td>
</tr>
<tr>
<td>计算机网络</td>
<td>《计算机网络自顶向下》</td>
</tr>
<tr>
<td>数据结构与算法</td>
<td>极客时间《数据结构与算法之美》</td>
</tr>
<tr>
<td>Linux</td>
<td>《Linux高性能服务器编程》</td>
</tr>
<tr>
<td>Java 基础与集合</td>
<td>《Java 实战》、《Effective Java》</td>
</tr>
<tr>
<td>JVM</td>
<td>《深入理解 Java 虚拟机》、极客时间《深入拆解 Java 虚拟机》</td>
</tr>
<tr>
<td>Netty</td>
<td>极客时间《Netty 源码剖析与实战》</td>
</tr>
<tr>
<td>Java 并发编程</td>
<td>《Java 并发编程的艺术》、极客时间《Java 并发编程实战》</td>
</tr>
<tr>
<td>Spring</td>
<td><a href="https://javadoop.com/">JavaDoop</a>、《Spring 源码深度解析》、《极客 Spring 编程常见错误 50 例》</td>
</tr>
<tr>
<td>Spring Boot</td>
<td>慕课网《小马哥 Spring Boot 2.0 深度实践》</td>
</tr>
<tr>
<td>设计模式</td>
<td>极客时间《设计模式之美》</td>
</tr>
<tr>
<td>单元测试</td>
<td>Spock</td>
</tr>
<tr>
<td>MySQL</td>
<td>《高性能 MySQL》、《MySQL 技术内幕》、极客时间《MySQL 45讲》、掘金《MySQL 是怎样运行的》</td>
</tr>
<tr>
<td>分布式事务</td>
<td>极客时间《分布式协议与算法》</td>
</tr>
<tr>
<td>RPC</td>
<td>极客时间《网络编程实战》、极客时间《RPC 实战与核心原理》</td>
</tr>
<tr>
<td>Dubbo</td>
<td>拉勾教育《Dubbo 源码解读》</td>
</tr>
<tr>
<td>ZooKeeper</td>
<td>《从Paxos 到 Zookeeper》</td>
</tr>
<tr>
<td>Spring Cloud</td>
<td>慕课网《Spring Cloud 微服务开发实践》</td>
</tr>
<tr>
<td>Redis</td>
<td>《Redis 设计与实现》，《Redis 开发与运维》、极客时间《Redis 核心技术与实战》</td>
</tr>
<tr>
<td>Kafka</td>
<td>《深入理解 Kafka》、极客时间《Kafka 核心技术与实战》</td>
</tr>
<tr>
<td>Docker</td>
<td>慕课网《跟 BAT 技术专家学 Docker + K8s》</td>
</tr>
<tr>
<td>大数据</td>
<td>极客时间《从 0 开始学大数据》</td>
</tr>
<tr>
<td>代码整洁</td>
<td>《代码整洁之道》、《重构》、《修改代码的艺术》</td>
</tr>
<tr>
<td>工作方法</td>
<td>极客时间《大厂晋升指南》、极客时间《左耳听风》</td>
</tr>
<tr>
<td>架构方法论</td>
<td>《数据密集型应用系统设计》、极客时间《从 0 开始学架构》、极客时间《后端技术面试》</td>
</tr>
<tr>
<td>外语</td>
<td>极客时间《互联网人的英语私教课》</td>
</tr>
</tbody></table>
<p>持续更新中。</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>后端</tag>
        <tag>学习</tag>
        <tag>路径</tag>
      </tags>
  </entry>
  <entry>
    <title>博客脚印</title>
    <url>/1487202510/</url>
    <content><![CDATA[<h1 id="boo516-com"><a href="#boo516-com" class="headerlink" title="boo516.com"></a>boo516.com</h1><p>最初的域名是 boo516.com，搭建在 Godaddy 服务中。截图时间是 2016 年 11 月 5 日。</p>
<p><img src="../images/boo516_com.jpg" alt="boo516_com"></p>
<h1 id="hibaobo-com"><a href="#hibaobo-com" class="headerlink" title="hibaobo.com"></a>hibaobo.com</h1><p>后来换了纯英文域名，也将网站服务搭建在各种不同的服务器上。</p>
<p>比如搬瓦工、腾讯云、知了云等等。也使用了 WordPress 这些博客系统。</p>
<p>不过因为学业和工作，暂停了挺长时间，也没留下太多网站的记录。</p>
<p><img src="../images/hibaobo_com.png" alt="hibaobo_com"></p>
<h1 id="baobo-me"><a href="#baobo-me" class="headerlink" title="baobo.me"></a>baobo.me</h1><p>有一天觉得原来的域名太长了，在 NameCheap 上购买了 .me 的域名，非常喜欢。</p>
<p>网站的服务也从知了云，到老薛主机，最后到 Github Pages。</p>
<p>来来回回折腾着，决定了现在的最终形式。</p>
<p>后续会多花些时间在博客上，写写教程，聊聊想法。</p>
<p>2022年，也要加油呀。</p>
]]></content>
      <categories>
        <category>收集</category>
      </categories>
      <tags>
        <tag>记录</tag>
      </tags>
  </entry>
  <entry>
    <title>外包</title>
    <url>/1326063135/</url>
    <content><![CDATA[<h1 id="外包定义"><a href="#外包定义" class="headerlink" title="外包定义"></a>外包定义</h1><ol>
<li>外包定义：主要看人选所做项目/产品性质，若项目/产品为外包性质，则定义为外包人员。</li>
<li>外包性质：<br>人力外包：人力资源外包/劳务派遣，一般为驻场形式。<br>项目外包：阶段性项目开发，驻场/非驻场形式。<br>业务外包：业务流程外包。</li>
<li>特别说明：<br>外包公司简介一般带有的关键词：IT服务、技术开发服务、信息技术解决方案、软件服务等。<br>如在外包公司内负责内部系统开发，不算为外包。</li>
</ol>
<h1 id="外包公司列表"><a href="#外包公司列表" class="headerlink" title="外包公司列表"></a>外包公司列表</h1><table>
<thead>
<tr>
<th>编号</th>
<th>外包类型</th>
<th>企业名称</th>
<th>主要服务公司/具体部门做外包项目</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>人力外包</td>
<td>中软国际</td>
<td>华为、中国移动、中国联通、阿里云、百度等</td>
</tr>
<tr>
<td>2</td>
<td>人力外包</td>
<td>软通动力</td>
<td>华为、微软、IBM、联想、中国银行、中国人寿、中石化、中石油、国家电网等</td>
</tr>
<tr>
<td>3</td>
<td>人力外包</td>
<td>文思海辉</td>
<td>微软、IBM、因特尔、花旗银行、索尼以及国内阿里巴巴、腾讯、百度、中移动、联通等</td>
</tr>
<tr>
<td>4</td>
<td>项目外包</td>
<td>大展科技</td>
<td>从欧美及日本客户承接软件项目</td>
</tr>
<tr>
<td>5</td>
<td>人力外包</td>
<td>亿达信息</td>
<td>富士施乐、SOFTBANK、UNISYS、日本乐天、SONY、阪急阪神、腾讯、阿里巴巴、华为、阿斯利康、先正达、赛诺菲、武田制药、美的、顺丰、唯品会、华夏人寿、天安人寿等</td>
</tr>
<tr>
<td>6</td>
<td>人力外包</td>
<td>法本信息</td>
<td>平安、顺丰、腾讯、中国联通、OPPO、苏宁、万科等</td>
</tr>
<tr>
<td>7</td>
<td>人力外包</td>
<td>武汉佰钧成</td>
<td>IBM、华为、Google、HP、Alcatel-Lucent、NTT Data等</td>
</tr>
<tr>
<td>8</td>
<td>人力外包&amp;项目外包</td>
<td>紫川软件</td>
<td>平安、中国移动、中国建设银行、华为、中兴等</td>
</tr>
<tr>
<td>9</td>
<td>人力外包</td>
<td>拓保软件</td>
<td>平安、顺丰、宝能等</td>
</tr>
<tr>
<td>10</td>
<td>人力外包</td>
<td>Infosys(印孚瑟斯)</td>
<td>微软、英特尔、SAP、3M、Arrow、Cisco等</td>
</tr>
<tr>
<td>11</td>
<td>人力外包</td>
<td>上海易立德</td>
<td>华为、美的、Vivo、长安汽车等</td>
</tr>
<tr>
<td>12</td>
<td>人力外包</td>
<td>博彦科技</td>
<td>字节跳动、顺丰等</td>
</tr>
<tr>
<td>13</td>
<td>项目外包</td>
<td>易思博软件</td>
<td>IBM、HP、NEC、Fujitsu、卓望等</td>
</tr>
<tr>
<td>14</td>
<td>人力外包</td>
<td>网新科技（网新新思）</td>
<td></td>
</tr>
<tr>
<td>15</td>
<td>人力外包</td>
<td>雁联计算系统有限公司</td>
<td>银行、各类交易所、第三方支付公司、互联网金融公司等金融及泛金融机构等</td>
</tr>
<tr>
<td>16</td>
<td>人力外包</td>
<td>上海启明软件</td>
<td></td>
</tr>
<tr>
<td>17</td>
<td>人力外包</td>
<td>上海华腾软件</td>
<td></td>
</tr>
<tr>
<td>18</td>
<td>项目外包</td>
<td>神州数码</td>
<td></td>
</tr>
<tr>
<td>19</td>
<td>项目外包</td>
<td>IBM</td>
<td>大连IBM专门做外包</td>
</tr>
<tr>
<td>20</td>
<td>项目外包</td>
<td>东软集团</td>
<td></td>
</tr>
<tr>
<td>21</td>
<td>项目外包</td>
<td>浪潮软件</td>
<td></td>
</tr>
<tr>
<td>22</td>
<td>项目外包</td>
<td>群硕软件</td>
<td>微软、摩托罗拉、Omnitracs、英特尔、SAP、沃尔玛、联合利华、银联、万科、万达、Vivo、康师傅等</td>
</tr>
<tr>
<td>23</td>
<td>项目外包</td>
<td>金证科技</td>
<td>银行外包开发</td>
</tr>
<tr>
<td>24</td>
<td>项目外包</td>
<td>信雅达</td>
<td>华为等</td>
</tr>
<tr>
<td>25</td>
<td>项目外包</td>
<td>大连华信</td>
<td>Pivotal等</td>
</tr>
<tr>
<td>26</td>
<td>人力外包&amp;项目外包</td>
<td>信必优</td>
<td>花旗银行等</td>
</tr>
<tr>
<td>27</td>
<td>人力外包&amp;业务外包</td>
<td>易宝软件</td>
<td>阿里、华为等</td>
</tr>
<tr>
<td>28</td>
<td>项目外包</td>
<td>慧讯软件</td>
<td>国知名跨平台安全解决方案供应商Centrify、知名欧美玩具供应商Mattel（美泰）、Hasbro（孩之宝）、移动电话供应商Philip、Nokia等</td>
</tr>
<tr>
<td>29</td>
<td>项目外包</td>
<td>恒拓开源</td>
<td>航空公司、机场及民航保障企业</td>
</tr>
<tr>
<td>30</td>
<td>人力外包</td>
<td>广州赛意信息</td>
<td>华为</td>
</tr>
<tr>
<td>31</td>
<td>人力外包</td>
<td>中兴软件技术（南昌）有限公司</td>
<td>中兴</td>
</tr>
<tr>
<td>32</td>
<td>项目外包</td>
<td>华通科技</td>
<td>对外合作部是做中兴的外包工作</td>
</tr>
<tr>
<td>33</td>
<td>人力外包</td>
<td>中软海纳</td>
<td>中兴</td>
</tr>
<tr>
<td>34</td>
<td>人力外包</td>
<td>微创科技</td>
<td>腾讯</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>收集</category>
      </categories>
      <tags>
        <tag>外包</tag>
      </tags>
  </entry>
  <entry>
    <title>走向开源之路</title>
    <url>/2465020203/</url>
    <content><![CDATA[<h1 id="首先你需要："><a href="#首先你需要：" class="headerlink" title="首先你需要："></a>首先你需要：</h1><ol>
<li>畅通的网络环境；</li>
<li>一个Github账号；</li>
<li>本机安装Git软件；</li>
<li>Don’t panic !</li>
</ol>
<h1 id="Fork-项目"><a href="#Fork-项目" class="headerlink" title="Fork 项目"></a>Fork 项目</h1><p>首先，在Github仓库Fork他人项目。然后复制自己仓库的项目地址（HTTP或SSH都可），在本地Clone下来。</p>
<p>如果项目文件体积大，可使用如下方式：</p>
<ol>
<li>（推荐）在浏览器上安装Github加速插件，使用其中的镜像地址； Clone完代码，建议执行<code>git remote set-url origin 自己的Github项目地址</code> 。</li>
<li>（推荐）在gitee.com网站，导入Github项目，使用gitee的项目地址进行Clone； Clone完代码，建议执行<code>git remote set-url origin 自己的Github项目地址</code> 。</li>
<li>使用命令 <code>git clone --depth=1</code> 进行Clone最新一次的提交代码，之后使用<code>git pull --unshallow</code> 。</li>
</ol>
<h1 id="同步项目代码"><a href="#同步项目代码" class="headerlink" title="同步项目代码"></a>同步项目代码</h1><ol>
<li>添加上游项目地址： <code>git remote add upstream 原始项目地址</code> 查看远程地址： <code>git remote -v</code> 查看远程分支： <code>git branch -r</code></li>
<li>拉取最新代码： <code>git fetch upstream</code></li>
<li>合并最新代码： 本地代码<strong>无修改</strong>：<code>git rebase upstream/master</code> 本地代码<strong>有修改</strong>：<code>git merge upstream/master</code></li>
<li>将最新代码上传到自己的远程仓库： <code>git push</code></li>
</ol>
<h1 id="构建项目（使用Maven）"><a href="#构建项目（使用Maven）" class="headerlink" title="构建项目（使用Maven）"></a>构建项目（使用Maven）</h1><p>确保编译版本和项目建议版本相一致。</p>
<p>执行命令<code>mvn clean install</code> ，或命令<code>mvn clean install -Dmaven.test.skip=true -Dmaven.javadoc.skip=true -Drat.skip=true -Dcheckstyle.skip=true -e</code> 跳过测试等过程。</p>
<p>如果某个模块构建失败，多次执行<code>mvn install</code> 即可。</p>
<p>参考链接：</p>
<p><a href="https://www.yuque.com/docs/share/eedab2ad-6486-4690-b048-d9bb9a6b4a4a">Soul 之 PR 提交流程 · 语雀</a></p>
<p><a href="http://wuchong.me/blog/2019/02/12/how-to-become-apache-committer/">如何从小白成长为 Apache Committer?</a></p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>开源</tag>
      </tags>
  </entry>
  <entry>
    <title>Alfred Workflow 时间转换</title>
    <url>/393446932/</url>
    <content><![CDATA[<h1 id="创建-Workflow"><a href="#创建-Workflow" class="headerlink" title="创建 Workflow"></a>创建 Workflow</h1><p>参考教程：<a href="https://sspai.com/post/61754%E3%80%82">https://sspai.com/post/61754。</a></p>
<h1 id="注意：如果使用-Python3"><a href="#注意：如果使用-Python3" class="headerlink" title="注意：如果使用 Python3"></a>注意：如果使用 Python3</h1><p>需要使用此仓库的 workflow 文件夹内容：<a href="https://github.com/NorthIsUp/alfred-workflow-py3%E3%80%82">https://github.com/NorthIsUp/alfred-workflow-py3。</a></p>
<h1 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h1><p><img src="../images/TimeConvert.png" alt="TimeConvert"></p>
<h1 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h1><p><a href="https://github.com/sakiila/minipy/tree/main/AlfredWorkflow">https://github.com/sakiila/minipy/tree/main/AlfredWorkflow</a></p>
<p>参考教程：<br><a href="https://pythonmana.com/2022/02/202202252149470874.html">使用python实现一个日期和时间戳互转的Alfred workflow</a></p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>实战</tag>
        <tag>Alfred</tag>
      </tags>
  </entry>
</search>
